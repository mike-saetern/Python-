-- creat 6 users
INSERT INTO users(first_name,last_name)
VALUES('Amy','Giver'),('Eli','Byers'),('Big','Bird'),('Kermit','The Frog'),('Marky','Mark'),('Cookie','Monster');
-- display all users
SELECT * FROM users;
-- have user 1 be friends with user 2,4,6. user 2 friends user 1,3,5 etc
INSERT INTO friendship (user_id,friend_id)
VALUES (1,2),(1,4),(1,6),(2,1),(2,3),(2,5),(3,2),(3,5),(4,3),(5,1),(5,6),(6,2),(6,3);
-- display all from friendship
SELECT * FROM friendship;
-- display like in pic. shows friends and their friends with names
SELECT users.first_name, users.last_name, users2.first_name as friend_first_name, users2.last_name as friend_last_name FROM users
JOIN friendship ON users.id = friendship.user_id
LEFT JOIN users as users2 ON users2.id = friendship.friend_id;
-- Return all users who are friends with the first user, make sure their names are displayed in results.
SELECT users2.first_name as first_name, users2.last_name as last_name, users.first_name as friends_with FROM users
JOIN friendship ON users.id = friendship.user_id
LEFT JOIN users as users2 ON users2.id = friendship.friend_id
WHERE users.id = 1;
-- return the count of all friendships
SELECT COUNT(*) as num_of_friendships from friendship;
-- findout who has the most friends and return count of their friends
SELECT user_id, users.first_name, users.last_name, count(user_id) as num_of_friends from friendship
JOIN users ON users.id = friendship.user_id
GROUP BY user_id
ORDER BY num_of_friends DESC
LIMIT 1;
-- Return the friends of the third user in alphabetical order
SELECT users2.first_name as first_name, users2.last_name as last_name, users.first_name as friends_with FROM users
JOIN friendship ON users.id = friendship.user_id
LEFT JOIN users as users2 ON users2.id = friendship.friend_id
WHERE users.id = 3
ORDER BY first_name;